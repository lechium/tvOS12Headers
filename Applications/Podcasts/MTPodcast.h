//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSManagedObject.h"

#import "IMMetricsDataSource.h"

@class NSSet, NSString;

@interface MTPodcast : NSManagedObject <IMMetricsDataSource>
{
}

+ (long long)storeCollectionIdForRedirectURL:(id)arg1;	// IMP=0x0000000100021878
+ (id)redirectURLForStoreCollectionId:(long long)arg1;	// IMP=0x000000010002175c
+ (_Bool)isRedirectURL:(id)arg1;	// IMP=0x00000001000216ac
+ (void)setRemovePlayedEpisodesSetting:(long long)arg1 forPodcastUuid:(id)arg2;	// IMP=0x0000000100020cb8
+ (double)timeIntervalForUpdate:(long long)arg1;	// IMP=0x0000000100020c08
+ (long long)updateIntervalDefaultValue;	// IMP=0x0000000100020ba8
+ (id)productURLForStoreCollectionId:(long long)arg1 storeTrackId:(long long)arg2;	// IMP=0x00000001000208c4
+ (unsigned long long)totalUnplayedCount;	// IMP=0x00000001000200d4
+ (id)insertNewPodcastInManagedObjectContext:(id)arg1 subscribed:(_Bool)arg2 feedUrl:(id)arg3 title:(id)arg4 author:(id)arg5 provider:(id)arg6 category:(id)arg7 imageUrl:(id)arg8 description:(id)arg9;	// IMP=0x000000010001fca4
+ (id)insertNewPodcastInManagedObjectContext:(id)arg1 subscribed:(_Bool)arg2 feedUrl:(id)arg3 title:(id)arg4 author:(id)arg5 provider:(id)arg6 category:(id)arg7 imageUrl:(id)arg8 description:(id)arg9 adamId:(long long)arg10;	// IMP=0x000000010001fb28
+ (id)latestEpisodeUuidForPodcastUuid:(id)arg1 ctx:(id)arg2;	// IMP=0x000000010007e680
+ (id)podcastUuidForEpisodeUuid:(id)arg1 ctx:(id)arg2;	// IMP=0x000000010007e348
+ (id)podcastUuidForFeedUrl:(id)arg1 ctx:(id)arg2;	// IMP=0x000000010007e29c
+ (id)podcastUuidForFeedUrlString:(id)arg1 ctx:(id)arg2;	// IMP=0x000000010007e05c
+ (id)predicateForPodcastUuids:(id)arg1;	// IMP=0x000000010007e01c
+ (id)predicateForAllPodcasts;	// IMP=0x000000010007dfdc
+ (int)autoDownloadDefaultValue;	// IMP=0x000000010007df7c
+ (id)sortDescriptorsForNewestToOldest:(_Bool)arg1;	// IMP=0x000000010007d920
+ (id)sortDescriptorsForNewestOnTop;	// IMP=0x000000010007d774
+ (id)sortDescriptorsForOldestOnTop;	// IMP=0x000000010007d610
+ (id)allPossibleEpisodeListSortOrderProperties;	// IMP=0x000000010007d07c
+ (long long)deletePlayedEpisodesDefaultValue;	// IMP=0x000000010007ce44
+ (long long)episodeLimitDefaultValue;	// IMP=0x000000010007cd84
+ (id)_imageFetchQueue;	// IMP=0x00000001000b8d58
+ (void)_downloadArtworkForPodcastUuid:(id)arg1;	// IMP=0x00000001000b8cdc
+ (id)_defaultPlaceholderArtworkWithSize:(struct CGSize)arg1;	// IMP=0x00000001000b8c5c
+ (void)fetchArtworkForPodcastUuid:(id)arg1 size:(struct CGSize)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x00000001000b879c
+ (id)artworkForPodcastUuid:(id)arg1 size:(struct CGSize)arg2;	// IMP=0x00000001000b86bc
+ (id)predicateForPodcastStoreId:(long long)arg1;	// IMP=0x0000000100159214
+ (id)predicateForPodcastUUID:(id)arg1;	// IMP=0x00000001001591d0
+ (id)predicateForPodcastWithTitle:(id)arg1;	// IMP=0x0000000100159138
+ (id)predicateForPodcastWithFeedUrl:(id)arg1;	// IMP=0x0000000100158f8c
+ (id)predicateForExcludingExplicitBasedOnSetting;	// IMP=0x0000000100158f0c
+ (id)predicateForUpdateInterval:(long long)arg1;	// IMP=0x0000000100158df8
+ (id)predicateForUpdatablePodcasts;	// IMP=0x0000000100158c80
+ (id)predicateForAutoDownloadType:(int)arg1;	// IMP=0x0000000100158c3c
+ (id)predicateForAutoDownloadEnabled;	// IMP=0x0000000100158b0c
+ (id)predicateForOrphanedFromCloud:(_Bool)arg1;	// IMP=0x0000000100158a7c
+ (id)predicateForSubscribedAndNotHidden:(_Bool)arg1;	// IMP=0x00000001001589dc
+ (id)predicateForSubscribed:(_Bool)arg1;	// IMP=0x000000010015894c
+ (id)userDefaultPropertiesAffectingPredicates;	// IMP=0x0000000100158894
+ (id)sortDescriptorsForTitle;	// IMP=0x000000010016582c
+ (id)sortDescriptorsForDateAdded;	// IMP=0x0000000100165730
+ (id)sortDescriptorsForRecentlyUpdated;	// IMP=0x0000000100165634
+ (id)sortDescriptorsForLastDatePlayed;	// IMP=0x0000000100165580
+ (id)sortDescriptorsForAllPodcasts;	// IMP=0x0000000100165524
+ (id)sortDescriptorsForManualOrder;	// IMP=0x0000000100165470
- (unsigned long long)countOfMyEpisodes;	// IMP=0x0000000100021974
- (id)bestFeedURLExcludingRedirectURL:(_Bool)arg1;	// IMP=0x0000000100021294
- (id)redirectURL;	// IMP=0x0000000100021258
- (id)countOfUnplayedEpisodes;	// IMP=0x00000001000211c4
- (id)countOfNewEpisodes;	// IMP=0x0000000100021130
- (id)colorTheme;	// IMP=0x000000010002109c
- (void)updateLastTouchDate;	// IMP=0x0000000100021060
- (void)resetGoDark;	// IMP=0x0000000100020fd8
@property(nonatomic, getter=isAuthenticatedDark) _Bool authenticatedDark;
@property(readonly, nonatomic, getter=isPastAutodownloadDark) _Bool autodownloadDark;
@property(readonly, nonatomic, getter=isPastFeedDark) _Bool feedDark;
@property(readonly, nonatomic, getter=isDark) _Bool dark;
@property(nonatomic) _Bool orphanedFromCloud; // @dynamic orphanedFromCloud;
- (id)twitterShareURL;	// IMP=0x0000000100020afc
- (id)shareURL;	// IMP=0x0000000100020a90
- (id)bestAvailableStoreCleanURL;	// IMP=0x00000001000206d8
- (_Bool)isSharable;	// IMP=0x000000010002069c
- (id)bestDescription;	// IMP=0x0000000100020630
- (void)updateEpisodesMetadataIdentifiers;	// IMP=0x0000000100020510
@property(nonatomic) _Bool subscribed; // @dynamic subscribed;
@property(retain, nonatomic) NSString *updatedFeedURL; // @dynamic updatedFeedURL;
@property(retain, nonatomic) NSString *title; // @dynamic title;
- (id)displayURL;	// IMP=0x00000001000825d0
- (id)nextEpisodeToPlay;	// IMP=0x0000000100082538
- (id)episodesInSeasonNumber:(long long)arg1 oldestEpisodesFirst:(_Bool)arg2 excludePlayed:(_Bool)arg3 excludeExplicit:(long long)arg4 excludeStreaming:(long long)arg5 limit:(unsigned long long)arg6;	// IMP=0x00000001000820b0
- (id)episodesInSeasonNumber:(long long)arg1 oldestEpisodesFirst:(_Bool)arg2 excludePlayed:(_Bool)arg3 excludeExplicit:(long long)arg4 limit:(unsigned long long)arg5;	// IMP=0x0000000100082098
- (id)episodesInSeasonNumber:(long long)arg1 oldestEpisodesFirst:(_Bool)arg2;	// IMP=0x0000000100082080
- (id)episodesInSeasonNumber:(long long)arg1;	// IMP=0x0000000100081ea4
- (id)episodesInLatestSeason;	// IMP=0x0000000100081cd4
- (long long)latestSeasonNumber;	// IMP=0x00000001000819b0
- (id)seasonNumbers;	// IMP=0x000000010008173c
- (_Bool)hasMultipleSeasons;	// IMP=0x00000001000816ec
- (_Bool)hasAtLeastOneSeason;	// IMP=0x00000001000814dc
- (id)_fetchRequestForDistinctSeasons;	// IMP=0x0000000100081300
- (id)oldestEpisodeInLatestSeasonOrShowExcludingPlayed:(_Bool)arg1 excludeExplicit:(long long)arg2 excludeStreaming:(long long)arg3;	// IMP=0x000000010008106c
- (id)oldestEpisodeInLatestSeasonOrShowExcludingPlayed:(_Bool)arg1 excludeExplicit:(long long)arg2;	// IMP=0x000000010008105c
- (id)oldestEpisodeInLatestSeasonOrShow;	// IMP=0x0000000100081048
- (id)_latestOrOldestEpisode:(_Bool)arg1 restrictToUserEpisodes:(_Bool)arg2 excludePlayed:(_Bool)arg3 excludeExplicit:(long long)arg4 excludeStreaming:(long long)arg5 excludingEpisodeUuid:(id)arg6 episodeTypeFilter:(long long)arg7;	// IMP=0x0000000100080990
- (id)_latestOrOldestEpisode:(_Bool)arg1 restrictToUserEpisodes:(_Bool)arg2 excludePlayed:(_Bool)arg3 excludeExplicit:(long long)arg4 excludingEpisodeUuid:(id)arg5 episodeTypeFilter:(long long)arg6;	// IMP=0x000000010008095c
- (id)_latestOrOldestEpisode:(_Bool)arg1 restrictToUserEpisodes:(_Bool)arg2 excludePlayed:(_Bool)arg3 excludeExplicit:(long long)arg4 episodeTypeFilter:(long long)arg5;	// IMP=0x0000000100080944
- (id)_latestOrOldestEpisode:(_Bool)arg1 restrictToUserEpisodes:(_Bool)arg2 excludePlayed:(_Bool)arg3 excludeExplicit:(long long)arg4 excludeStreaming:(long long)arg5 excludingEpisodeUuid:(id)arg6;	// IMP=0x000000010008091c
- (id)_latestOrOldestEpisode:(_Bool)arg1 restrictToUserEpisodes:(_Bool)arg2 excludePlayed:(_Bool)arg3 excludeExplicit:(long long)arg4 excludingEpisodeUuid:(id)arg5;	// IMP=0x0000000100080904
- (id)_latestOrOldestEpisode:(_Bool)arg1 restrictToUserEpisodes:(_Bool)arg2 excludePlayed:(_Bool)arg3 excludeExplicit:(long long)arg4 excludeStreaming:(long long)arg5;	// IMP=0x00000001000808f4
- (id)_latestOrOldestEpisode:(_Bool)arg1 restrictToUserEpisodes:(_Bool)arg2 excludePlayed:(_Bool)arg3 excludeExplicit:(long long)arg4;	// IMP=0x00000001000808e4
- (id)_latestOrOldestEpisode:(_Bool)arg1 restrictToUserEpisodes:(_Bool)arg2 excludePlayed:(_Bool)arg3;	// IMP=0x00000001000808d4
- (id)newestEpisodeUuid;	// IMP=0x000000010008083c
- (id)oldestUserEpisodeNotPlayedExcludingExplicit:(long long)arg1 excludeStreaming:(long long)arg2;	// IMP=0x0000000100080814
- (id)oldestUserEpisodeNotPlayedExcludingExplicit:(long long)arg1;	// IMP=0x0000000100080804
- (id)oldestUserEpisodeExcludingExplicit:(long long)arg1 excludeStreaming:(long long)arg2;	// IMP=0x00000001000807dc
- (id)oldestUserEpisodeExcludingExplicit:(long long)arg1;	// IMP=0x00000001000807cc
- (id)oldestUserEpisode;	// IMP=0x00000001000807bc
- (id)oldestEpisodeNotPlayedExcludingExplicit:(long long)arg1 excludingStreaming:(long long)arg2;	// IMP=0x0000000100080794
- (id)oldestEpisodeNotPlayedExcludingExplicit:(long long)arg1;	// IMP=0x0000000100080784
- (id)oldestEpisodeNotPlayed;	// IMP=0x0000000100080774
- (id)oldestFullEpisode;	// IMP=0x0000000100080754
- (id)oldestEpisodeExcludingExplicit:(long long)arg1 excludeStreaming:(long long)arg2;	// IMP=0x000000010008072c
- (id)oldestEpisodeExcludingExplicit:(long long)arg1;	// IMP=0x000000010008071c
- (id)oldestEpisode;	// IMP=0x000000010008070c
- (id)newestUserEpisodeNotPlayedExcludingExplicit:(long long)arg1 excludeStreaming:(long long)arg2;	// IMP=0x00000001000806e4
- (id)newestUserEpisodeNotPlayedExcludingExplicit:(long long)arg1;	// IMP=0x00000001000806d4
- (id)newestUserEpisodeExcludingExplicit:(long long)arg1;	// IMP=0x00000001000806b4
- (id)newestEpisodeNotPlayedExcludingExplicit:(long long)arg1 excludeStreaming:(long long)arg2;	// IMP=0x000000010008068c
- (id)newestEpisodeNotPlayedExcludingExplicit:(long long)arg1;	// IMP=0x000000010008067c
- (id)newestFullEpisode;	// IMP=0x000000010008065c
- (id)newestEpisode;	// IMP=0x0000000100080648
- (id)newestEpisodeExcludingUuid:(id)arg1 excludeExplicit:(long long)arg2 excludeStreaming:(long long)arg3;	// IMP=0x0000000100080618
- (id)newestEpisodeExcludingUuid:(id)arg1 excludeExplicit:(long long)arg2;	// IMP=0x0000000100080608
- (id)firstUserEpisodeNotPlayed;	// IMP=0x0000000100080180
- (id)_episodesNextToEpisode:(id)arg1 after:(_Bool)arg2 usePlayOrder:(_Bool)arg3 restrictToUserEpisodes:(_Bool)arg4 excludePlayed:(_Bool)arg5 excludeExplicit:(long long)arg6 excludeStreaming:(long long)arg7 limit:(long long)arg8;	// IMP=0x000000010007faa8
- (id)_episodesNextToEpisode:(id)arg1 after:(_Bool)arg2 usePlayOrder:(_Bool)arg3 restrictToUserEpisodes:(_Bool)arg4 excludePlayed:(_Bool)arg5 excludeExplicit:(long long)arg6 limit:(long long)arg7;	// IMP=0x000000010007fa7c
- (id)_episodeNextToEpisode:(id)arg1 after:(_Bool)arg2 usePlayOrder:(_Bool)arg3 restrictToUserEpisodes:(_Bool)arg4 excludePlayed:(_Bool)arg5 excludeExplicit:(long long)arg6 excludeStreaming:(long long)arg7;	// IMP=0x000000010007fa14
- (id)_episodeNextToEpisode:(id)arg1 after:(_Bool)arg2 usePlayOrder:(_Bool)arg3 restrictToUserEpisodes:(_Bool)arg4 excludePlayed:(_Bool)arg5 excludeExplicit:(long long)arg6;	// IMP=0x000000010007f9ec
- (id)_episodeBeforeEpisode:(id)arg1 usePlayOrder:(_Bool)arg2 restrictToUserEpisodes:(_Bool)arg3 excludePlayed:(_Bool)arg4;	// IMP=0x000000010007f9c0
- (id)_episodeAfterEpisode:(id)arg1 usePlayOrder:(_Bool)arg2 restrictToUserEpisodes:(_Bool)arg3 excludePlayed:(_Bool)arg4 excludeExplicit:(long long)arg5 excludeStreaming:(long long)arg6;	// IMP=0x000000010007f974
- (id)_episodeAfterEpisode:(id)arg1 usePlayOrder:(_Bool)arg2 restrictToUserEpisodes:(_Bool)arg3 excludePlayed:(_Bool)arg4 excludeExplicit:(long long)arg5;	// IMP=0x000000010007f964
- (id)_episodeAfterEpisode:(id)arg1 usePlayOrder:(_Bool)arg2 restrictToUserEpisodes:(_Bool)arg3 excludePlayed:(_Bool)arg4;	// IMP=0x000000010007f954
- (id)episodeAfterEpisode:(id)arg1;	// IMP=0x000000010007f93c
- (id)episodeOlderThanEpisode:(id)arg1;	// IMP=0x000000010007f924
- (id)episodeNewerThanEpisode:(id)arg1;	// IMP=0x000000010007f90c
- (id)episodeNewerThanEpisode:(id)arg1 excludePlayed:(_Bool)arg2;	// IMP=0x000000010007f8f0
- (id)userEpisodeNewerThanEpisode:(id)arg1 excludePlayed:(_Bool)arg2 excludeExplicit:(long long)arg3 excludeStreaming:(long long)arg4;	// IMP=0x000000010007f8c4
- (id)userEpisodeNewerThanEpisode:(id)arg1 excludePlayed:(_Bool)arg2 excludeExplicit:(long long)arg3;	// IMP=0x000000010007f8b4
- (id)episodesAfterEpisode:(id)arg1 restrictToUserEpisodes:(_Bool)arg2;	// IMP=0x000000010007f874
- (id)userEpisodesAfterEpisode:(id)arg1;	// IMP=0x000000010007f838
- (id)userEpisodeAfterEpisode:(id)arg1;	// IMP=0x000000010007f820
- (id)mostRecentlyManuallyAddedEpisode;	// IMP=0x000000010007f3ec
- (id)mostRecentlyPlayedEpisodeExcludingEpisodeUuid:(id)arg1 restrictedToLibrary:(_Bool)arg2 excludeExplicit:(long long)arg3 excludeStreaming:(long long)arg4;	// IMP=0x000000010007ecfc
- (id)mostRecentlyPlayedEpisodeExcludingEpisodeUuid:(id)arg1 restrictedToLibrary:(_Bool)arg2 excludeExplicit:(long long)arg3;	// IMP=0x000000010007ecec
- (id)mostRecentlyPlayedEpisodeExcludingEpisodeUuid:(id)arg1 restrictedToLibrary:(_Bool)arg2;	// IMP=0x000000010007ecdc
- (id)mostRecentlyPlayedEpisodeExcludingEpisodeUuid:(id)arg1;	// IMP=0x000000010007eccc
- (id)mostRecentlyPlayedEpisodeRestrictedToLibrary:(_Bool)arg1;	// IMP=0x000000010007ecb8
- (id)mostRecentlyPlayedEpisodeExcludingExplicit:(long long)arg1 excludingStreaming:(long long)arg2;	// IMP=0x000000010007ec94
- (id)mostRecentlyPlayedEpisodeExcludingExplicit:(long long)arg1;	// IMP=0x000000010007ec78
- (id)mostRecentlyPlayedEpisode;	// IMP=0x000000010007ec68
- (id)episodeToResume;	// IMP=0x000000010007ea08
- (int)autoDownloadResolvedValue;	// IMP=0x000000010007df28
- (_Bool)autodownloadDefault;	// IMP=0x000000010007df18
- (_Bool)updateCursorPosition:(_Bool)arg1;	// IMP=0x000000010007dc08
@property(nonatomic) _Bool playbackNewestToOldest;
- (id)sortDescriptorsForPlayOrder;	// IMP=0x000000010007d8d8
- (id)sortDescriptorsForSortOrder;	// IMP=0x000000010007d3c0
@property(nonatomic) _Bool sortAscending;
@property(nonatomic) long long showTypeSetting; // @dynamic showTypeSetting;
- (_Bool)deletePlayedEpisodesResolvedValue;	// IMP=0x000000010007cde4
- (long long)episodeLimitResolvedValue;	// IMP=0x000000010007cd30
- (_Bool)isSerialShowTypeInFeed;	// IMP=0x000000010007ccd0
- (long long)showTypeInFeedResolvedValue;	// IMP=0x000000010007cc74
- (long long)showTypeResolvedValue;	// IMP=0x000000010007cc50
@property(nonatomic) long long podcastPID; // @dynamic podcastPID;
- (_Bool)_stateForFlag:(long long)arg1;	// IMP=0x000000010007cb54
@property(retain, nonatomic) NSString *webpageURL; // @dynamic webpageURL;
@property(retain, nonatomic) NSString *showTypeInFeed; // @dynamic showTypeInFeed;
@property(retain, nonatomic) NSString *imageURL; // @dynamic imageURL;
@property(nonatomic) double updateAvg; // @dynamic updateAvg;
@property(nonatomic) double updateStdDev; // @dynamic updateStdDev;
@property(nonatomic) double feedChangedDate; // @dynamic feedChangedDate;
@property(retain, nonatomic) NSString *itemDescription; // @dynamic itemDescription;
@property(retain, nonatomic) NSString *author; // @dynamic author;
@property(nonatomic) long long flags; // @dynamic flags;
- (void)_setFlag:(long long)arg1 state:(_Bool)arg2;	// IMP=0x000000010007c314
@property(nonatomic) _Bool needsArtworkUpdate;
@property(nonatomic) double modifiedDate; // @dynamic modifiedDate;
@property(nonatomic) double lastDatePlayed; // @dynamic lastDatePlayed;
@property(nonatomic) _Bool isExplicit;
@property(nonatomic) _Bool importing;
@property(nonatomic) long long deletePlayedEpisodes; // @dynamic deletePlayedEpisodes;
@property(nonatomic) _Bool hasBeenSynced;
- (void)markPlaylistsForUpdate;	// IMP=0x000000010007bed0
- (id)currentFeedURL;	// IMP=0x000000010007bd84
- (void)fetchArtworkWithSize:(struct CGSize)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00000001000b8bbc
- (id)artworkWithSize:(struct CGSize)arg1;	// IMP=0x00000001000b8b30
- (id)metricsAdditionalData;	// IMP=0x00000001001a2b34
- (id)metricsContentIdentifier;	// IMP=0x00000001001a29c0

// Remaining properties
@property(nonatomic) double addedDate; // @dynamic addedDate;
@property(readonly, nonatomic) _Bool autoDownload; // @dynamic autoDownload;
@property(nonatomic) int autoDownloadType; // @dynamic autoDownloadType;
@property(retain, nonatomic) NSString *category; // @dynamic category;
@property(nonatomic) long long darkCount; // @dynamic darkCount;
@property(nonatomic) long long darkCountLocal; // @dynamic darkCountLocal;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(nonatomic) double downloadedDate; // @dynamic downloadedDate;
@property(nonatomic) long long episodeLimit; // @dynamic episodeLimit;
@property(retain, nonatomic) NSSet *episodes; // @dynamic episodes;
@property(retain, nonatomic) NSString *feedURL; // @dynamic feedURL;
@property(readonly) unsigned long long hash;
@property(nonatomic) _Bool hidden; // @dynamic hidden;
@property(nonatomic) long long keepEpisodes; // @dynamic keepEpisodes;
@property(nonatomic) double lastStoreEpisodesInfoCheckDate; // @dynamic lastStoreEpisodesInfoCheckDate;
@property(nonatomic) double lastStorePodcastInfoCheckDate; // @dynamic lastStorePodcastInfoCheckDate;
@property(nonatomic) double lastTouchDate; // @dynamic lastTouchDate;
@property(retain, nonatomic) NSString *nextEpisodeUuid; // @dynamic nextEpisodeUuid;
@property(nonatomic) _Bool notifications; // @dynamic notifications;
@property(retain, nonatomic) NSSet *playlistSettings; // @dynamic playlistSettings;
@property(retain, nonatomic) NSSet *playlists; // @dynamic playlists;
@property(retain, nonatomic) NSString *provider; // @dynamic provider;
@property(nonatomic) _Bool showPlacardForOrphanedFromCloud; // @dynamic showPlacardForOrphanedFromCloud;
@property(nonatomic) _Bool showPlacardForRemovePlayedEpisodes; // @dynamic showPlacardForRemovePlayedEpisodes;
@property(nonatomic) _Bool showPlacardForSavedEpisodes; // @dynamic showPlacardForSavedEpisodes;
@property(nonatomic) long long sortOrder; // @dynamic sortOrder;
@property(retain, nonatomic) NSString *storeCleanURL; // @dynamic storeCleanURL;
@property(nonatomic) long long storeCollectionId; // @dynamic storeCollectionId;
@property(retain, nonatomic) NSString *storeShortURL; // @dynamic storeShortURL;
@property(readonly) Class superclass;
@property(nonatomic) long long updateInterval; // @dynamic updateInterval;
@property(nonatomic) double updatedDate; // @dynamic updatedDate;
@property(retain, nonatomic) NSString *uuid; // @dynamic uuid;

@end

